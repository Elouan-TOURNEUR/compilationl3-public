/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.parser;

import sc.lexer.*;
import sc.node.*;
import sc.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProg node1 = (PProg) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce APProg */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce ALLdf */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AVideLdf */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce ADfDf */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce AVideLdvo2 */
            {
                ArrayList<Object> list = new4();
                push(goTo(3), list, false);
            }
            break;
            case 5: /* reduce ALLdvo2 */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list, false);
            }
            break;
            case 6: /* reduce AVideLdvo */
            {
                ArrayList<Object> list = new6();
                push(goTo(4), list, false);
            }
            break;
            case 7: /* reduce ALLdvo */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list, false);
            }
            break;
            case 8: /* reduce ALLdv */
            {
                ArrayList<Object> list = new8();
                push(goTo(5), list, false);
            }
            break;
            case 9: /* reduce ADvLdv */
            {
                ArrayList<Object> list = new9();
                push(goTo(5), list, false);
            }
            break;
            case 10: /* reduce AVarDv */
            {
                ArrayList<Object> list = new10();
                push(goTo(6), list, false);
            }
            break;
            case 11: /* reduce AIdVar */
            {
                ArrayList<Object> list = new11();
                push(goTo(7), list, false);
            }
            break;
            case 12: /* reduce ATabVar */
            {
                ArrayList<Object> list = new12();
                push(goTo(7), list, false);
            }
            break;
            case 13: /* reduce ALexpLe */
            {
                ArrayList<Object> list = new13();
                push(goTo(8), list, false);
            }
            break;
            case 14: /* reduce AExpLe */
            {
                ArrayList<Object> list = new14();
                push(goTo(8), list, false);
            }
            break;
            case 15: /* reduce AVideLe */
            {
                ArrayList<Object> list = new15();
                push(goTo(8), list, false);
            }
            break;
            case 16: /* reduce AOuE */
            {
                ArrayList<Object> list = new16();
                push(goTo(9), list, false);
            }
            break;
            case 17: /* reduce AEtE */
            {
                ArrayList<Object> list = new17();
                push(goTo(9), list, false);
            }
            break;
            case 18: /* reduce AEtE1 */
            {
                ArrayList<Object> list = new18();
                push(goTo(10), list, false);
            }
            break;
            case 19: /* reduce AEgalE1 */
            {
                ArrayList<Object> list = new19();
                push(goTo(10), list, false);
            }
            break;
            case 20: /* reduce AEgalE2 */
            {
                ArrayList<Object> list = new20();
                push(goTo(11), list, false);
            }
            break;
            case 21: /* reduce AInfE2 */
            {
                ArrayList<Object> list = new21();
                push(goTo(11), list, false);
            }
            break;
            case 22: /* reduce APlusE2 */
            {
                ArrayList<Object> list = new22();
                push(goTo(11), list, false);
            }
            break;
            case 23: /* reduce APlusE3 */
            {
                ArrayList<Object> list = new23();
                push(goTo(12), list, false);
            }
            break;
            case 24: /* reduce AMinusE3 */
            {
                ArrayList<Object> list = new24();
                push(goTo(12), list, false);
            }
            break;
            case 25: /* reduce AMultE3 */
            {
                ArrayList<Object> list = new25();
                push(goTo(12), list, false);
            }
            break;
            case 26: /* reduce AMultE4 */
            {
                ArrayList<Object> list = new26();
                push(goTo(13), list, false);
            }
            break;
            case 27: /* reduce ADivE4 */
            {
                ArrayList<Object> list = new27();
                push(goTo(13), list, false);
            }
            break;
            case 28: /* reduce ANonE4 */
            {
                ArrayList<Object> list = new28();
                push(goTo(13), list, false);
            }
            break;
            case 29: /* reduce ANonE5 */
            {
                ArrayList<Object> list = new29();
                push(goTo(14), list, false);
            }
            break;
            case 30: /* reduce AParE5 */
            {
                ArrayList<Object> list = new30();
                push(goTo(14), list, false);
            }
            break;
            case 31: /* reduce AParE6 */
            {
                ArrayList<Object> list = new31();
                push(goTo(15), list, false);
            }
            break;
            case 32: /* reduce ANbrE6 */
            {
                ArrayList<Object> list = new32();
                push(goTo(15), list, false);
            }
            break;
            case 33: /* reduce AAppE6 */
            {
                ArrayList<Object> list = new33();
                push(goTo(15), list, false);
            }
            break;
            case 34: /* reduce AVarE6 */
            {
                ArrayList<Object> list = new34();
                push(goTo(15), list, false);
            }
            break;
            case 35: /* reduce AIaffI */
            {
                ArrayList<Object> list = new35();
                push(goTo(16), list, false);
            }
            break;
            case 36: /* reduce AIsiI */
            {
                ArrayList<Object> list = new36();
                push(goTo(16), list, false);
            }
            break;
            case 37: /* reduce AItqI */
            {
                ArrayList<Object> list = new37();
                push(goTo(16), list, false);
            }
            break;
            case 38: /* reduce AIappI */
            {
                ArrayList<Object> list = new38();
                push(goTo(16), list, false);
            }
            break;
            case 39: /* reduce AIblocI */
            {
                ArrayList<Object> list = new39();
                push(goTo(16), list, false);
            }
            break;
            case 40: /* reduce AIretI */
            {
                ArrayList<Object> list = new40();
                push(goTo(16), list, false);
            }
            break;
            case 41: /* reduce ALaffIaff */
            {
                ArrayList<Object> list = new41();
                push(goTo(17), list, false);
            }
            break;
            case 42: /* reduce AAppIapp */
            {
                ArrayList<Object> list = new42();
                push(goTo(18), list, false);
            }
            break;
            case 43: /* reduce AClosIsi */
            {
                ArrayList<Object> list = new43();
                push(goTo(19), list, false);
            }
            break;
            case 44: /* reduce AOpenIsi */
            {
                ArrayList<Object> list = new44();
                push(goTo(19), list, false);
            }
            break;
            case 45: /* reduce ALoopItq */
            {
                ArrayList<Object> list = new45();
                push(goTo(20), list, false);
            }
            break;
            case 46: /* reduce ARetIret */
            {
                ArrayList<Object> list = new46();
                push(goTo(21), list, false);
            }
            break;
            case 47: /* reduce ABlocIbloc */
            {
                ArrayList<Object> list = new47();
                push(goTo(22), list, false);
            }
            break;
            case 48: /* reduce AILi */
            {
                ArrayList<Object> list = new48();
                push(goTo(23), list, false);
            }
            break;
            case 49: /* reduce AVideLi */
            {
                ArrayList<Object> list = new49();
                push(goTo(23), list, false);
            }
            break;
            case 50: /* reduce AFctApp */
            {
                ArrayList<Object> list = new50();
                push(goTo(24), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce APProg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        PLdvo2 pldvo2Node2;
        PLdf pldfNode3;
        pldvo2Node2 = (PLdvo2)nodeArrayList1.get(0);
        pldfNode3 = (PLdf)nodeArrayList2.get(0);

        pprogNode1 = new APProg(pldvo2Node2, pldfNode3);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ALLdf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLdf pldfNode1;
        {
            // Block
        PDf pdfNode2;
        PLdf pldfNode3;
        pdfNode2 = (PDf)nodeArrayList1.get(0);
        pldfNode3 = (PLdf)nodeArrayList2.get(0);

        pldfNode1 = new ALLdf(pdfNode2, pldfNode3);
        }
	nodeList.add(pldfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AVideLdf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLdf pldfNode1;
        {
            // Block

        pldfNode1 = new AVideLdf();
        }
	nodeList.add(pldfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ADfDf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDf pdfNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        PLdvo pldvoNode4;
        TRPar trparNode5;
        PLdvo2 pldvo2Node6;
        PIbloc piblocNode7;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pldvoNode4 = (PLdvo)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        pldvo2Node6 = (PLdvo2)nodeArrayList5.get(0);
        piblocNode7 = (PIbloc)nodeArrayList6.get(0);

        pdfNode1 = new ADfDf(tidNode2, tlparNode3, pldvoNode4, trparNode5, pldvo2Node6, piblocNode7);
        }
	nodeList.add(pdfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AVideLdvo2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLdvo2 pldvo2Node1;
        {
            // Block

        pldvo2Node1 = new AVideLdvo2();
        }
	nodeList.add(pldvo2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ALLdvo2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLdvo2 pldvo2Node1;
        {
            // Block
        PLdvo pldvoNode2;
        TPvir tpvirNode3;
        PLdvo2 pldvo2Node4;
        pldvoNode2 = (PLdvo)nodeArrayList1.get(0);
        tpvirNode3 = (TPvir)nodeArrayList2.get(0);
        pldvo2Node4 = (PLdvo2)nodeArrayList3.get(0);

        pldvo2Node1 = new ALLdvo2(pldvoNode2, tpvirNode3, pldvo2Node4);
        }
	nodeList.add(pldvo2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AVideLdvo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLdvo pldvoNode1;
        {
            // Block

        pldvoNode1 = new AVideLdvo();
        }
	nodeList.add(pldvoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ALLdvo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLdvo pldvoNode1;
        {
            // Block
        PLdv pldvNode2;
        pldvNode2 = (PLdv)nodeArrayList1.get(0);

        pldvoNode1 = new ALLdvo(pldvNode2);
        }
	nodeList.add(pldvoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ALLdv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLdv pldvNode1;
        {
            // Block
        PDv pdvNode2;
        TVir tvirNode3;
        PLdv pldvNode4;
        pdvNode2 = (PDv)nodeArrayList1.get(0);
        tvirNode3 = (TVir)nodeArrayList2.get(0);
        pldvNode4 = (PLdv)nodeArrayList3.get(0);

        pldvNode1 = new ALLdv(pdvNode2, tvirNode3, pldvNode4);
        }
	nodeList.add(pldvNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ADvLdv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLdv pldvNode1;
        {
            // Block
        PDv pdvNode2;
        pdvNode2 = (PDv)nodeArrayList1.get(0);

        pldvNode1 = new ADvLdv(pdvNode2);
        }
	nodeList.add(pldvNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AVarDv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDv pdvNode1;
        {
            // Block
        TEntier tentierNode2;
        PVar pvarNode3;
        tentierNode2 = (TEntier)nodeArrayList1.get(0);
        pvarNode3 = (PVar)nodeArrayList2.get(0);

        pdvNode1 = new AVarDv(tentierNode2, pvarNode3);
        }
	nodeList.add(pdvNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AIdVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvarNode1 = new AIdVar(tidNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ATabVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        TLCroc tlcrocNode3;
        PE peNode4;
        TRCroc trcrocNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlcrocNode3 = (TLCroc)nodeArrayList2.get(0);
        peNode4 = (PE)nodeArrayList3.get(0);
        trcrocNode5 = (TRCroc)nodeArrayList4.get(0);

        pvarNode1 = new ATabVar(tidNode2, tlcrocNode3, peNode4, trcrocNode5);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ALexpLe */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLe pleNode1;
        {
            // Block
        PE peNode2;
        TVir tvirNode3;
        PLe pleNode4;
        peNode2 = (PE)nodeArrayList1.get(0);
        tvirNode3 = (TVir)nodeArrayList2.get(0);
        pleNode4 = (PLe)nodeArrayList3.get(0);

        pleNode1 = new ALexpLe(peNode2, tvirNode3, pleNode4);
        }
	nodeList.add(pleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AExpLe */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLe pleNode1;
        {
            // Block
        PE peNode2;
        peNode2 = (PE)nodeArrayList1.get(0);

        pleNode1 = new AExpLe(peNode2);
        }
	nodeList.add(pleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AVideLe */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLe pleNode1;
        {
            // Block

        pleNode1 = new AVideLe();
        }
	nodeList.add(pleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AOuE */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE peNode1;
        {
            // Block
        PE peNode2;
        TOu touNode3;
        PE1 pe1Node4;
        peNode2 = (PE)nodeArrayList1.get(0);
        touNode3 = (TOu)nodeArrayList2.get(0);
        pe1Node4 = (PE1)nodeArrayList3.get(0);

        peNode1 = new AOuE(peNode2, touNode3, pe1Node4);
        }
	nodeList.add(peNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AEtE */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE peNode1;
        {
            // Block
        PE1 pe1Node2;
        pe1Node2 = (PE1)nodeArrayList1.get(0);

        peNode1 = new AEtE(pe1Node2);
        }
	nodeList.add(peNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AEtE1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE1 pe1Node1;
        {
            // Block
        PE1 pe1Node2;
        TEt tetNode3;
        PE2 pe2Node4;
        pe1Node2 = (PE1)nodeArrayList1.get(0);
        tetNode3 = (TEt)nodeArrayList2.get(0);
        pe2Node4 = (PE2)nodeArrayList3.get(0);

        pe1Node1 = new AEtE1(pe1Node2, tetNode3, pe2Node4);
        }
	nodeList.add(pe1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AEgalE1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE1 pe1Node1;
        {
            // Block
        PE2 pe2Node2;
        pe2Node2 = (PE2)nodeArrayList1.get(0);

        pe1Node1 = new AEgalE1(pe2Node2);
        }
	nodeList.add(pe1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AEgalE2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE2 pe2Node1;
        {
            // Block
        PE2 pe2Node2;
        TEgal tegalNode3;
        PE3 pe3Node4;
        pe2Node2 = (PE2)nodeArrayList1.get(0);
        tegalNode3 = (TEgal)nodeArrayList2.get(0);
        pe3Node4 = (PE3)nodeArrayList3.get(0);

        pe2Node1 = new AEgalE2(pe2Node2, tegalNode3, pe3Node4);
        }
	nodeList.add(pe2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AInfE2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE2 pe2Node1;
        {
            // Block
        PE2 pe2Node2;
        TInf tinfNode3;
        PE3 pe3Node4;
        pe2Node2 = (PE2)nodeArrayList1.get(0);
        tinfNode3 = (TInf)nodeArrayList2.get(0);
        pe3Node4 = (PE3)nodeArrayList3.get(0);

        pe2Node1 = new AInfE2(pe2Node2, tinfNode3, pe3Node4);
        }
	nodeList.add(pe2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce APlusE2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE2 pe2Node1;
        {
            // Block
        PE3 pe3Node2;
        pe3Node2 = (PE3)nodeArrayList1.get(0);

        pe2Node1 = new APlusE2(pe3Node2);
        }
	nodeList.add(pe2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce APlusE3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE3 pe3Node1;
        {
            // Block
        PE3 pe3Node2;
        TPlus tplusNode3;
        PE4 pe4Node4;
        pe3Node2 = (PE3)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pe4Node4 = (PE4)nodeArrayList3.get(0);

        pe3Node1 = new APlusE3(pe3Node2, tplusNode3, pe4Node4);
        }
	nodeList.add(pe3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AMinusE3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE3 pe3Node1;
        {
            // Block
        PE3 pe3Node2;
        TMinus tminusNode3;
        PE4 pe4Node4;
        pe3Node2 = (PE3)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pe4Node4 = (PE4)nodeArrayList3.get(0);

        pe3Node1 = new AMinusE3(pe3Node2, tminusNode3, pe4Node4);
        }
	nodeList.add(pe3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AMultE3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE3 pe3Node1;
        {
            // Block
        PE4 pe4Node2;
        pe4Node2 = (PE4)nodeArrayList1.get(0);

        pe3Node1 = new AMultE3(pe4Node2);
        }
	nodeList.add(pe3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AMultE4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE4 pe4Node1;
        {
            // Block
        PE4 pe4Node2;
        TMult tmultNode3;
        PE5 pe5Node4;
        pe4Node2 = (PE4)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        pe5Node4 = (PE5)nodeArrayList3.get(0);

        pe4Node1 = new AMultE4(pe4Node2, tmultNode3, pe5Node4);
        }
	nodeList.add(pe4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ADivE4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE4 pe4Node1;
        {
            // Block
        PE4 pe4Node2;
        TDiv tdivNode3;
        PE5 pe5Node4;
        pe4Node2 = (PE4)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pe5Node4 = (PE5)nodeArrayList3.get(0);

        pe4Node1 = new ADivE4(pe4Node2, tdivNode3, pe5Node4);
        }
	nodeList.add(pe4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ANonE4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE4 pe4Node1;
        {
            // Block
        PE5 pe5Node2;
        pe5Node2 = (PE5)nodeArrayList1.get(0);

        pe4Node1 = new ANonE4(pe5Node2);
        }
	nodeList.add(pe4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ANonE5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE5 pe5Node1;
        {
            // Block
        TNon tnonNode2;
        PE5 pe5Node3;
        tnonNode2 = (TNon)nodeArrayList1.get(0);
        pe5Node3 = (PE5)nodeArrayList2.get(0);

        pe5Node1 = new ANonE5(tnonNode2, pe5Node3);
        }
	nodeList.add(pe5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AParE5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE5 pe5Node1;
        {
            // Block
        PE6 pe6Node2;
        pe6Node2 = (PE6)nodeArrayList1.get(0);

        pe5Node1 = new AParE5(pe6Node2);
        }
	nodeList.add(pe5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AParE6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE6 pe6Node1;
        {
            // Block
        TLPar tlparNode2;
        PE peNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        peNode3 = (PE)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pe6Node1 = new AParE6(tlparNode2, peNode3, trparNode4);
        }
	nodeList.add(pe6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ANbrE6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE6 pe6Node1;
        {
            // Block
        TNbr tnbrNode2;
        tnbrNode2 = (TNbr)nodeArrayList1.get(0);

        pe6Node1 = new ANbrE6(tnbrNode2);
        }
	nodeList.add(pe6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AAppE6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE6 pe6Node1;
        {
            // Block
        PApp pappNode2;
        pappNode2 = (PApp)nodeArrayList1.get(0);

        pe6Node1 = new AAppE6(pappNode2);
        }
	nodeList.add(pe6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AVarE6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE6 pe6Node1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pe6Node1 = new AVarE6(pvarNode2);
        }
	nodeList.add(pe6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AIaffI */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PI piNode1;
        {
            // Block
        PIaff piaffNode2;
        piaffNode2 = (PIaff)nodeArrayList1.get(0);

        piNode1 = new AIaffI(piaffNode2);
        }
	nodeList.add(piNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AIsiI */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PI piNode1;
        {
            // Block
        PIsi pisiNode2;
        pisiNode2 = (PIsi)nodeArrayList1.get(0);

        piNode1 = new AIsiI(pisiNode2);
        }
	nodeList.add(piNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AItqI */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PI piNode1;
        {
            // Block
        PItq pitqNode2;
        pitqNode2 = (PItq)nodeArrayList1.get(0);

        piNode1 = new AItqI(pitqNode2);
        }
	nodeList.add(piNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AIappI */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PI piNode1;
        {
            // Block
        PIapp piappNode2;
        piappNode2 = (PIapp)nodeArrayList1.get(0);

        piNode1 = new AIappI(piappNode2);
        }
	nodeList.add(piNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AIblocI */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PI piNode1;
        {
            // Block
        PIbloc piblocNode2;
        piblocNode2 = (PIbloc)nodeArrayList1.get(0);

        piNode1 = new AIblocI(piblocNode2);
        }
	nodeList.add(piNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AIretI */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PI piNode1;
        {
            // Block
        PIret piretNode2;
        piretNode2 = (PIret)nodeArrayList1.get(0);

        piNode1 = new AIretI(piretNode2);
        }
	nodeList.add(piNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ALaffIaff */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIaff piaffNode1;
        {
            // Block
        PVar pvarNode2;
        TEgal tegalNode3;
        PE peNode4;
        TPvir tpvirNode5;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tegalNode3 = (TEgal)nodeArrayList2.get(0);
        peNode4 = (PE)nodeArrayList3.get(0);
        tpvirNode5 = (TPvir)nodeArrayList4.get(0);

        piaffNode1 = new ALaffIaff(pvarNode2, tegalNode3, peNode4, tpvirNode5);
        }
	nodeList.add(piaffNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AAppIapp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIapp piappNode1;
        {
            // Block
        PApp pappNode2;
        TPvir tpvirNode3;
        pappNode2 = (PApp)nodeArrayList1.get(0);
        tpvirNode3 = (TPvir)nodeArrayList2.get(0);

        piappNode1 = new AAppIapp(pappNode2, tpvirNode3);
        }
	nodeList.add(piappNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AClosIsi */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIsi pisiNode1;
        {
            // Block
        TSi tsiNode2;
        PE peNode3;
        TAlors talorsNode4;
        PIbloc piblocNode5;
        TSinon tsinonNode6;
        PIbloc piblocNode7;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        peNode3 = (PE)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        piblocNode5 = (PIbloc)nodeArrayList4.get(0);
        tsinonNode6 = (TSinon)nodeArrayList5.get(0);
        piblocNode7 = (PIbloc)nodeArrayList6.get(0);

        pisiNode1 = new AClosIsi(tsiNode2, peNode3, talorsNode4, piblocNode5, tsinonNode6, piblocNode7);
        }
	nodeList.add(pisiNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AOpenIsi */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIsi pisiNode1;
        {
            // Block
        TSi tsiNode2;
        PE peNode3;
        TAlors talorsNode4;
        PIbloc piblocNode5;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        peNode3 = (PE)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        piblocNode5 = (PIbloc)nodeArrayList4.get(0);

        pisiNode1 = new AOpenIsi(tsiNode2, peNode3, talorsNode4, piblocNode5);
        }
	nodeList.add(pisiNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ALoopItq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PItq pitqNode1;
        {
            // Block
        TTantq ttantqNode2;
        PE peNode3;
        TFaire tfaireNode4;
        PIbloc piblocNode5;
        ttantqNode2 = (TTantq)nodeArrayList1.get(0);
        peNode3 = (PE)nodeArrayList2.get(0);
        tfaireNode4 = (TFaire)nodeArrayList3.get(0);
        piblocNode5 = (PIbloc)nodeArrayList4.get(0);

        pitqNode1 = new ALoopItq(ttantqNode2, peNode3, tfaireNode4, piblocNode5);
        }
	nodeList.add(pitqNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ARetIret */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIret piretNode1;
        {
            // Block
        TRet tretNode2;
        PE peNode3;
        TPvir tpvirNode4;
        tretNode2 = (TRet)nodeArrayList1.get(0);
        peNode3 = (PE)nodeArrayList2.get(0);
        tpvirNode4 = (TPvir)nodeArrayList3.get(0);

        piretNode1 = new ARetIret(tretNode2, peNode3, tpvirNode4);
        }
	nodeList.add(piretNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ABlocIbloc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIbloc piblocNode1;
        {
            // Block
        TLAcc tlaccNode2;
        PLi pliNode3;
        TRAcc traccNode4;
        tlaccNode2 = (TLAcc)nodeArrayList1.get(0);
        pliNode3 = (PLi)nodeArrayList2.get(0);
        traccNode4 = (TRAcc)nodeArrayList3.get(0);

        piblocNode1 = new ABlocIbloc(tlaccNode2, pliNode3, traccNode4);
        }
	nodeList.add(piblocNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AILi */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLi pliNode1;
        {
            // Block
        PI piNode2;
        PLi pliNode3;
        piNode2 = (PI)nodeArrayList1.get(0);
        pliNode3 = (PLi)nodeArrayList2.get(0);

        pliNode1 = new AILi(piNode2, pliNode3);
        }
	nodeList.add(pliNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AVideLi */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLi pliNode1;
        {
            // Block

        pliNode1 = new AVideLi();
        }
	nodeList.add(pliNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AFctApp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PApp pappNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        PLe pleNode4;
        TRPar trparNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pleNode4 = (PLe)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pappNode1 = new AFctApp(tidNode2, tlparNode3, pleNode4, trparNode5);
        }
	nodeList.add(pappNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 4}, {16, REDUCE, 6}, {24, SHIFT, 1}, },
			{{-1, ERROR, 1}, {25, SHIFT, 7}, },
			{{-1, ERROR, 2}, {26, ACCEPT, -1}, },
			{{-1, REDUCE, 2}, {25, SHIFT, 9}, },
			{{-1, ERROR, 4}, {16, SHIFT, 12}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 9}, {17, SHIFT, 13}, },
			{{-1, REDUCE, 11}, {14, SHIFT, 14}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 9}, {10, SHIFT, 15}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 2}, {25, SHIFT, 9}, },
			{{-1, REDUCE, 4}, {16, REDUCE, 6}, {24, SHIFT, 1}, },
			{{-1, ERROR, 13}, {24, SHIFT, 1}, },
			{{-1, ERROR, 14}, {0, SHIFT, 19}, {7, SHIFT, 20}, {10, SHIFT, 21}, {25, SHIFT, 22}, },
			{{-1, REDUCE, 6}, {24, SHIFT, 1}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 20}, {0, SHIFT, 19}, {7, SHIFT, 20}, {10, SHIFT, 21}, {25, SHIFT, 22}, },
			{{-1, ERROR, 21}, {0, SHIFT, 19}, {7, SHIFT, 20}, {10, SHIFT, 21}, {25, SHIFT, 22}, },
			{{-1, REDUCE, 11}, {10, SHIFT, 35}, {14, SHIFT, 14}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 24}, {9, SHIFT, 36}, {15, SHIFT, 37}, },
			{{-1, REDUCE, 17}, {8, SHIFT, 38}, },
			{{-1, REDUCE, 19}, {5, SHIFT, 39}, {6, SHIFT, 40}, },
			{{-1, REDUCE, 22}, {1, SHIFT, 41}, {2, SHIFT, 42}, },
			{{-1, REDUCE, 25}, {3, SHIFT, 43}, {4, SHIFT, 44}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 32}, {11, SHIFT, 45}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 34}, {9, SHIFT, 36}, {11, SHIFT, 46}, },
			{{-1, REDUCE, 15}, {0, SHIFT, 19}, {7, SHIFT, 20}, {10, SHIFT, 21}, {25, SHIFT, 22}, },
			{{-1, ERROR, 36}, {0, SHIFT, 19}, {7, SHIFT, 20}, {10, SHIFT, 21}, {25, SHIFT, 22}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 38}, {0, SHIFT, 19}, {7, SHIFT, 20}, {10, SHIFT, 21}, {25, SHIFT, 22}, },
			{{-1, ERROR, 39}, {0, SHIFT, 19}, {7, SHIFT, 20}, {10, SHIFT, 21}, {25, SHIFT, 22}, },
			{{-1, ERROR, 40}, {0, SHIFT, 19}, {7, SHIFT, 20}, {10, SHIFT, 21}, {25, SHIFT, 22}, },
			{{-1, ERROR, 41}, {0, SHIFT, 19}, {7, SHIFT, 20}, {10, SHIFT, 21}, {25, SHIFT, 22}, },
			{{-1, ERROR, 42}, {0, SHIFT, 19}, {7, SHIFT, 20}, {10, SHIFT, 21}, {25, SHIFT, 22}, },
			{{-1, ERROR, 43}, {0, SHIFT, 19}, {7, SHIFT, 20}, {10, SHIFT, 21}, {25, SHIFT, 22}, },
			{{-1, ERROR, 44}, {0, SHIFT, 19}, {7, SHIFT, 20}, {10, SHIFT, 21}, {25, SHIFT, 22}, },
			{{-1, REDUCE, 4}, {16, REDUCE, 6}, {24, SHIFT, 1}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 47}, {11, SHIFT, 58}, },
			{{-1, REDUCE, 14}, {9, SHIFT, 36}, {17, SHIFT, 59}, },
			{{-1, REDUCE, 16}, {8, SHIFT, 38}, },
			{{-1, REDUCE, 18}, {5, SHIFT, 39}, {6, SHIFT, 40}, },
			{{-1, REDUCE, 21}, {1, SHIFT, 41}, {2, SHIFT, 42}, },
			{{-1, REDUCE, 20}, {1, SHIFT, 41}, {2, SHIFT, 42}, },
			{{-1, REDUCE, 23}, {3, SHIFT, 43}, {4, SHIFT, 44}, },
			{{-1, REDUCE, 24}, {3, SHIFT, 43}, {4, SHIFT, 44}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 57}, {12, SHIFT, 60}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 15}, {0, SHIFT, 19}, {7, SHIFT, 20}, {10, SHIFT, 21}, {25, SHIFT, 22}, },
			{{-1, REDUCE, 49}, {12, SHIFT, 60}, {18, SHIFT, 63}, {19, SHIFT, 64}, {22, SHIFT, 65}, {25, SHIFT, 22}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 63}, {0, SHIFT, 19}, {7, SHIFT, 20}, {10, SHIFT, 21}, {25, SHIFT, 22}, },
			{{-1, ERROR, 64}, {0, SHIFT, 19}, {7, SHIFT, 20}, {10, SHIFT, 21}, {25, SHIFT, 22}, },
			{{-1, ERROR, 65}, {0, SHIFT, 19}, {7, SHIFT, 20}, {10, SHIFT, 21}, {25, SHIFT, 22}, },
			{{-1, ERROR, 66}, {6, SHIFT, 79}, },
			{{-1, REDUCE, 49}, {12, SHIFT, 60}, {18, SHIFT, 63}, {19, SHIFT, 64}, {22, SHIFT, 65}, {25, SHIFT, 22}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 74}, {13, SHIFT, 81}, },
			{{-1, ERROR, 75}, {16, SHIFT, 82}, },
			{{-1, ERROR, 76}, {9, SHIFT, 36}, {16, SHIFT, 83}, },
			{{-1, ERROR, 77}, {9, SHIFT, 36}, {20, SHIFT, 84}, },
			{{-1, ERROR, 78}, {9, SHIFT, 36}, {23, SHIFT, 85}, },
			{{-1, ERROR, 79}, {0, SHIFT, 19}, {7, SHIFT, 20}, {10, SHIFT, 21}, {25, SHIFT, 22}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 84}, {12, SHIFT, 60}, },
			{{-1, ERROR, 85}, {12, SHIFT, 60}, },
			{{-1, ERROR, 86}, {9, SHIFT, 36}, {16, SHIFT, 89}, },
			{{-1, REDUCE, 44}, {21, SHIFT, 90}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 90}, {12, SHIFT, 60}, },
			{{-1, REDUCE, 43}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 10}, {11, 16}, },
			{{-1, 11}, },
			{{-1, 3}, {12, 17}, {45, 57}, },
			{{-1, 4}, {15, 32}, },
			{{-1, 5}, {13, 18}, },
			{{-1, 6}, },
			{{-1, 23}, {1, 8}, {60, 66}, {67, 66}, },
			{{-1, 47}, {59, 62}, },
			{{-1, 48}, {14, 24}, {21, 34}, {63, 76}, {64, 77}, {65, 78}, {79, 86}, },
			{{-1, 25}, {36, 49}, },
			{{-1, 26}, {38, 50}, },
			{{-1, 27}, {39, 51}, {40, 52}, },
			{{-1, 28}, {41, 53}, {42, 54}, },
			{{-1, 29}, {20, 33}, {43, 55}, {44, 56}, },
			{{-1, 30}, },
			{{-1, 67}, },
			{{-1, 68}, },
			{{-1, 69}, },
			{{-1, 70}, },
			{{-1, 71}, },
			{{-1, 72}, },
			{{-1, 73}, {57, 61}, {84, 87}, {85, 88}, {90, 91}, },
			{{-1, 74}, {67, 80}, },
			{{-1, 31}, {60, 75}, {67, 75}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: ';', 'entier ', id, EOF",
			"expecting: id",
			"expecting: EOF",
			"expecting: id, EOF",
			"expecting: ';'",
			"expecting: ')', ';'",
			"expecting: ')', ';', ','",
			"expecting: ')', '[', ';', ','",
			"expecting: '('",
			"expecting: '{', ';', 'entier ', id, EOF",
			"expecting: 'entier '",
			"expecting: nbr, '!', '(', id",
			"expecting: ')', 'entier '",
			"expecting: '{', id, EOF",
			"expecting: '+', '-', '*', '/', '<', '=', '&', '|', ')', ']', ';', ',', ' alors', 'faire'",
			"expecting: '+', '-', '*', '/', '<', '=', '&', '|', '(', ')', '[', ']', ';', ',', ' alors', 'faire'",
			"expecting: '|', ']'",
			"expecting: '&', '|', ')', ']', ';', ',', ' alors', 'faire'",
			"expecting: '<', '=', '&', '|', ')', ']', ';', ',', ' alors', 'faire'",
			"expecting: '+', '-', '<', '=', '&', '|', ')', ']', ';', ',', ' alors', 'faire'",
			"expecting: ')'",
			"expecting: '|', ')'",
			"expecting: nbr, '!', '(', ')', id",
			"expecting: '{', ';', 'entier '",
			"expecting: '|', ')', ','",
			"expecting: '{'",
			"expecting: '{', '}', 'retour', 'si ', 'tantque ', id",
			"expecting: '='",
			"expecting: '}'",
			"expecting: '|', ';'",
			"expecting: '|', ' alors'",
			"expecting: '|', 'faire'",
			"expecting: '{', '}', 'retour', 'si ', 'sinon', 'tantque ', id, EOF",
			"expecting: '{', '}', 'retour', 'si ', 'sinon', 'tantque ', id",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 6, 7, 6, 8, 2, 3, 9, 10, 11, 12, 2, 13, 5, 14, 11, 11, 15, 14, 16, 17, 18, 19, 14, 14, 14, 14, 20, 14, 21, 22, 11, 14, 11, 11, 11, 11, 11, 11, 11, 23, 14, 20, 24, 17, 18, 19, 19, 14, 14, 14, 14, 25, 14, 22, 26, 3, 20, 11, 11, 11, 27, 26, 26, 26, 26, 26, 26, 26, 28, 4, 29, 30, 31, 11, 28, 32, 26, 26, 25, 25, 29, 33, 26, 26, 25, 26, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
