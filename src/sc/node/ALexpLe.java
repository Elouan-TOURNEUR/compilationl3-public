/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class ALexpLe extends PLe
{
    private PE _e_;
    private TVir _vir_;
    private PLe _le_;

    public ALexpLe()
    {
        // Constructor
    }

    public ALexpLe(
        @SuppressWarnings("hiding") PE _e_,
        @SuppressWarnings("hiding") TVir _vir_,
        @SuppressWarnings("hiding") PLe _le_)
    {
        // Constructor
        setE(_e_);

        setVir(_vir_);

        setLe(_le_);

    }

    @Override
    public Object clone()
    {
        return new ALexpLe(
            cloneNode(this._e_),
            cloneNode(this._vir_),
            cloneNode(this._le_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALexpLe(this);
    }

    public PE getE()
    {
        return this._e_;
    }

    public void setE(PE node)
    {
        if(this._e_ != null)
        {
            this._e_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._e_ = node;
    }

    public TVir getVir()
    {
        return this._vir_;
    }

    public void setVir(TVir node)
    {
        if(this._vir_ != null)
        {
            this._vir_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._vir_ = node;
    }

    public PLe getLe()
    {
        return this._le_;
    }

    public void setLe(PLe node)
    {
        if(this._le_ != null)
        {
            this._le_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._le_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._e_)
            + toString(this._vir_)
            + toString(this._le_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._e_ == child)
        {
            this._e_ = null;
            return;
        }

        if(this._vir_ == child)
        {
            this._vir_ = null;
            return;
        }

        if(this._le_ == child)
        {
            this._le_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._e_ == oldChild)
        {
            setE((PE) newChild);
            return;
        }

        if(this._vir_ == oldChild)
        {
            setVir((TVir) newChild);
            return;
        }

        if(this._le_ == oldChild)
        {
            setLe((PLe) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
