/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class ATabDvar extends PDvar
{
    private TId _id_;
    private TLCroc _lCroc_;
    private TNbr _nbr_;
    private TRCroc _rCroc_;

    public ATabDvar()
    {
        // Constructor
    }

    public ATabDvar(
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TLCroc _lCroc_,
        @SuppressWarnings("hiding") TNbr _nbr_,
        @SuppressWarnings("hiding") TRCroc _rCroc_)
    {
        // Constructor
        setId(_id_);

        setLCroc(_lCroc_);

        setNbr(_nbr_);

        setRCroc(_rCroc_);

    }

    @Override
    public Object clone()
    {
        return new ATabDvar(
            cloneNode(this._id_),
            cloneNode(this._lCroc_),
            cloneNode(this._nbr_),
            cloneNode(this._rCroc_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATabDvar(this);
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TLCroc getLCroc()
    {
        return this._lCroc_;
    }

    public void setLCroc(TLCroc node)
    {
        if(this._lCroc_ != null)
        {
            this._lCroc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lCroc_ = node;
    }

    public TNbr getNbr()
    {
        return this._nbr_;
    }

    public void setNbr(TNbr node)
    {
        if(this._nbr_ != null)
        {
            this._nbr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._nbr_ = node;
    }

    public TRCroc getRCroc()
    {
        return this._rCroc_;
    }

    public void setRCroc(TRCroc node)
    {
        if(this._rCroc_ != null)
        {
            this._rCroc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rCroc_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._lCroc_)
            + toString(this._nbr_)
            + toString(this._rCroc_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._lCroc_ == child)
        {
            this._lCroc_ = null;
            return;
        }

        if(this._nbr_ == child)
        {
            this._nbr_ = null;
            return;
        }

        if(this._rCroc_ == child)
        {
            this._rCroc_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._lCroc_ == oldChild)
        {
            setLCroc((TLCroc) newChild);
            return;
        }

        if(this._nbr_ == oldChild)
        {
            setNbr((TNbr) newChild);
            return;
        }

        if(this._rCroc_ == oldChild)
        {
            setRCroc((TRCroc) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
